# -*- coding: utf-8 -*-

import numpy as np

def drag_divergence_mach_number(qcsweep,tonc,cldesign):
    x04 = [9.826818,
    15.421047,
    24.75967,
    37.369606,
    44.283195,
    50.317955,
    55.25474,
    59.643906,
    64.77002]
    y04 = [0.8323499,
    0.8438471,
    0.86480874,
    0.897132,
    0.9203818,
    0.9408034,
    0.961445,
    0.9749861,
    0.9889804]
    x06 = [10.038761,
    16.12098,
    22.603973,
    29.228842,
    35.868618,
    42.010468,
    46.307453,
    51.742165,
    55.419224,
    59.203373,
    62.09876,
    64.725296]
    y06 = [0.81368136,
    0.8250809,
    0.840606,
    0.8585061,
    0.8782057,
    0.8968033,
    0.91396797,
    0.93571144,
    0.95179856,
    0.9660617,
    0.97629696,
    0.98358184]
    x08 = [9.909558,
    16.103834,
    20.756126,
    28.09219,
    36.697918,
    44.25959,
    49.934074,
    54.924778,
    59.566963,
    64.602554]
    y08 = [0.7980854,
    0.80826074,
    0.81914556,
    0.83930653,
    0.8652217,
    0.89294815,
    0.91904974,
    0.94128275,
    0.9607816,
    0.97859937]
    x10 = [9.974656,
    16.884186,
    23.793715,
    33.405235,
    40.618393,
    46.689594,
    53.907555,
    59.85916,
    64.80017]
    y10 = [0.77644205,
    0.7942851,
    0.8121282,
    0.84144694,
    0.8664393,
    0.8912598,
    0.9266657,
    0.95671743,
    0.97295195]
    x12 = [10.086135,
    16.57907,
    23.33256,
    30.861103,
    40.089157,
    47.006805,
    50.93026,
    55.6122,
    59.281723,
    65.01435]
    y12 = [0.7603973,
    0.77712214,
    0.7957976,
    0.81952506,
    0.8517245,
    0.8803811,
    0.9016261,
    0.92592376,
    0.946018,
    0.969304]
    if tonc < 0.04: MDD_B =  0.85
    elif tonc > 0.12: MDD_B = 0.7
    if tonc >= 0.04 and tonc <= 0.06: 
        MDD_B_l = np.interp(qcsweep,x04,y04)
        MDD_B_u = np.interp(qcsweep,x06,y06)
        MDD_B = np.interp(tonc,[0.04,0.06],[MDD_B_l,MDD_B_u])
    elif tonc >= 0.06 and tonc <= 0.08: 
        MDD_B_l = np.interp(qcsweep,x06,y06)
        MDD_B_u = np.interp(qcsweep,x08,y08)
        MDD_B = np.interp(tonc,[0.06,0.08],[MDD_B_l,MDD_B_u])
    elif tonc >= 0.08 and tonc <= 0.1: 
        MDD_B_l = np.interp(qcsweep,x08,y08)
        MDD_B_u = np.interp(qcsweep,x10,y10)
        MDD_B = np.interp(tonc,[0.08,0.10],[MDD_B_l,MDD_B_u])
    elif tonc >= 0.1 and tonc <= 0.12: 
        MDD_B_l = np.interp(qcsweep,x10,y10)
        MDD_B_u = np.interp(qcsweep,x12,y12)
        MDD_B = np.interp(tonc,[0.10,0.12],[MDD_B_l,MDD_B_u])
    lx04 = [-0.003030303,
    0.08686869,
    0.15959597,
    0.22727273,
    0.37979797,
    0.4969697]
    ly04 = [1.0005,
    1.0,
    0.9985,
    0.9955,
    0.9865,
    0.976]
    lx06 = [-0.001010101,
    0.06969697,
    0.14343435,
    0.21818182,
    0.33737373,
    0.4989899]
    ly06 = [1.0,
    1.0,
    0.995,
    0.986,
    0.97,
    0.9415]
    lx08 = [-0.003030303,
    0.04040404,
    0.092929296,
    0.20404041,
    0.34848484,
    0.4989899]
    ly08 = [0.9995,
    0.9995,
    0.9955,
    0.981,
    0.955,
    0.924]
    lx10 = [-0.003030303,
    0.038383838,
    0.12222222,
    0.24141414,
    0.34949496,
    0.4959596]
    ly10 = [0.9995,
    0.999,
    0.9925,
    0.975,
    0.955,
    0.924]
    lx12 = [0.0,
    0.02929293,
    0.06969697,
    0.15050505,
    0.25858587,
    0.35454544,
    0.4979798]
    ly12 = [1.0,
    0.9995,
    0.9955,
    0.982,
    0.9605,
    0.938,
    0.902]
    if tonc < 0.04: LF =  1.0
    elif tonc > 0.12: LF = 0.98
    if tonc >= 0.04 and tonc <= 0.06: 
        LF_l = np.interp(qcsweep,lx04,ly04)
        LF_u = np.interp(qcsweep,lx06,ly06)
        LF = np.interp(tonc,[0.04,0.06],[LF_l,LF_u])
    elif tonc >= 0.06 and tonc <= 0.08: 
        LF_l = np.interp(qcsweep,lx06,ly06)
        LF_u = np.interp(qcsweep,lx08,ly08)
        LF = np.interp(tonc,[0.06,0.08],[LF_l,LF_u])
    elif tonc >= 0.08 and tonc <= 0.1: 
        LF_l = np.interp(qcsweep,lx08,ly08)
        LF_u = np.interp(qcsweep,lx10,ly10)
        LF = np.interp(tonc,[0.08,0.10],[LF_l,LF_u])
    elif tonc >= 0.1 and tonc <= 0.12: 
        LF_l = np.interp(qcsweep,lx10,ly10)
        LF_u = np.interp(qcsweep,lx12,ly12)
        LF = np.interp(tonc,[0.10,0.12],[LF_l,LF_u])
    return MDD_B*LF - 0.05*cldesign