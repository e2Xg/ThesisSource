# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np

from Source.Geometry.Analysis.Fuselage.fus_sections2points import fus_sections2points
from Source.Geometry.Analysis.Fuselage.fus_sections2area import fus_sections2area
from Source.Geometry.Analysis.Fuselage.fus_sections2volume import fus_sections2volume
from Source.Geometry.Analysis.Fuselage.fus_xsec_area import fus_xsec_area
from Source.Geometry.Analysis.Fuselage.fus_xsec_perimeter import fus_xsec_perimeter
from Source.Geometry.Analysis.Fuselage.fus_sections2length import fus_sections2length
from Source.Geometry.Analysis.Fuselage.fus_points2depth import fus_points2depth
from Source.Geometry.Analysis.Fuselage.fus_points2width import fus_points2width
from Source.Geometry.Analysis.Flying_Surface.fs_sections2points import fs_sections2points
from Source.Geometry.Analysis.Flying_Surface.fs_sections2area import fs_sections2area
from Source.Geometry.Analysis.Flying_Surface.fs_chordwise_area_distribution import fs_chordwise_area_distribution
from Source.Geometry.Analysis.Flying_Surface.fs_sections2volume import fs_sections2volume
from Source.Geometry.Analysis.Flying_Surface.fs_xsec_area import fs_xsec_area
from Source.Geometry.Analysis.Flying_Surface.fs_equivalent_planform import fs_equivalent_planform
from Source.Geometry.Analysis.Flying_Surface.fs_planform2exposed import fs_planform2exposed
from Source.Geometry.Analysis.Flying_Surface.fs_volume_coefficient import fs_volume_coefficient

def analyze_geometry(geometry_input):
    """ Analyze Geometry With Inputs Generated By Create Geometry """
    geometry_data = dict()
    for tag in geometry_input.keys():
        geometry_data[tag] = dict()
        geometry_data[tag]["Type"] = geometry_input[tag]["Type"]
        geometry_data[tag]["Data"] = pd.DataFrame(index = [], columns = ["Value"])
        #Component is fuselage
        if geometry_input[tag]["Type"] == "Fuselage":
            sections = []
            for index, row in geometry_input[tag]["Xsec"].iterrows():
                sections.append([row["X-Location"],row["Y-Coordinates"],row["Z-Coordinates"]])
            geometry_data[tag]["Data"].loc["Point Cloud","Value"] = fus_sections2points(sections)
            geometry_data[tag]["Data"].loc["Theoretical Surface Area","Value"] = fus_sections2area(sections)
            geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"] = geometry_data[tag]["Data"].loc["Theoretical Surface Area","Value"]- geometry_input[tag]["Total Capture Area"] - geometry_input[tag]["Total Nozzle Area"]
            geometry_data[tag]["Data"].loc["Capture Area Location","Value"] = geometry_input[tag]["Capture Area Location"]
            geometry_data[tag]["Data"].loc["Total Capture Area","Value"] = geometry_input[tag]["Total Capture Area"]
            geometry_data[tag]["Data"].loc["Nozzle Area Location","Value"] = geometry_input[tag]["Nozzle Area Location"]
            geometry_data[tag]["Data"].loc["Total Nozzle Area","Value"] = geometry_input[tag]["Total Nozzle Area"]
            geometry_data[tag]["Data"].loc["Plug Length","Value"] = geometry_input[tag]["Plug Length"]
            geometry_data[tag]["Data"].loc["Theoretical Volume","Value"] = fus_sections2volume(sections)
            geometry_data[tag]["Data"].loc["Area Distribution","Value"] = fus_xsec_area(sections)
            geometry_data[tag]["Data"].loc["Perimeter Distribution","Value"] = fus_xsec_perimeter(sections)
            geometry_data[tag]["Data"].loc["Length","Value"] = fus_sections2length(sections)
            geometry_data[tag]["Data"].loc["Max Depth","Value"] = fus_points2depth(geometry_data[tag]["Data"].loc["Point Cloud","Value"])
            geometry_data[tag]["Data"].loc["Max Width","Value"] = fus_points2width(geometry_data[tag]["Data"].loc["Point Cloud","Value"])
        #Component is wing or horizontal tail or vertical tail or canard
        elif geometry_input[tag]["Type"] == "Wing" or geometry_input[tag]["Type"] == "Horizontal Tail" or geometry_input[tag]["Type"] == "Vertical Tail" or geometry_input[tag]["Type"] == "Canard":
            sections = []; tca = []; x_c_m = 0; t_c_m = 0
            for index, row in geometry_input[tag]["Xsec"].iterrows():
                xc = []; zc = []
                for i in range(len(row["Airfoil X/c-Coordinates"])):
                    xc.append(row["Airfoil X/c-Coordinates"][i]*row["Airfoil Chord Length"]+row["Airfoil Leading-Edge X Location"])
                    zc.append(row["Airfoil Z/c-Coordinates"][i]*row["Airfoil Chord Length"])
                tca.append([row["Airfoil Leading-Edge Y Location"],max(row["Airfoil Thickness Function Thickness/c Values"])])
                sections.append([xc,row["Airfoil Leading-Edge Y Location"],zc])
                
                x_c_m_i = 0; t_c_m_i = 0
                for i in range(len(row["Airfoil Thickness Function Thickness/c Values"])):
                    if row["Airfoil Thickness Function Thickness/c Values"][i] >= t_c_m_i:
                        t_c_m_i = row["Airfoil Thickness Function Thickness/c Values"][i]
                        x_c_m_i = row["Airfoil X/c-Coordinates"][i]
                t_c_m += t_c_m_i
                x_c_m += x_c_m_i

            geometry_data[tag]["Data"].loc["Max t/c Location x/c","Value"] = x_c_m/float(len(geometry_input[tag]["Xsec"]))
            geometry_data[tag]["Data"].loc["Max t/c","Value"] = t_c_m/float(len(geometry_input[tag]["Xsec"]))
            geometry_data[tag]["Data"].loc["Point Cloud","Value"] = fs_sections2points(sections)
            geometry_data[tag]["Data"].loc["Theoretical Exposed Volume","Value"] = fs_sections2volume(sections)
            geometry_data[tag]["Data"].loc["Area Distribution","Value"] = fs_xsec_area(sections)
            geometry_data[tag]["Data"].loc["Chordwise Area Distribution","Value"] = fs_chordwise_area_distribution(geometry_input[tag]["Xsec"],type=geometry_input[tag]["Type"])
            geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"] = fs_sections2area(sections) + geometry_data[tag]["Data"].loc["Area Distribution","Value"][0][1] + geometry_data[tag]["Data"].loc["Area Distribution","Value"][-1][1]
            geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"] = geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"] - geometry_data[tag]["Data"].loc["Area Distribution","Value"][-1][1]
            ep_parms = fs_equivalent_planform(sections,geometry_input[tag]["Type"])
            tca_tot = 0.0; tca_span = 0.0
            for i in range(len(tca)-1):
                tca_tot += ((tca[i][1]+tca[i+1][1])/2.0)*(tca[i+1][0]-tca[i][0])
                tca_span += (tca[i+1][0]-tca[i][0])
            geometry_data[tag]["Data"].loc["Weighted Average of Exposed Thickness to Chord Ratio","Value"] = tca_tot/tca_span
            if geometry_input[tag]["Type"] == "Wing":
                reference_tag = tag
                geometry_data[geometry_input[tag]["Attached Component Tag"]]["Data"].loc["Wetted Surface Area","Value"] -= 2.0*geometry_data[tag]["Data"].loc["Area Distribution","Value"][0][1]
                geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"] = 2.0*geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"]
                geometry_data[tag]["Data"].loc["Theoretical Exposed Volume","Value"] = 2.0*geometry_data[tag]["Data"].loc["Theoretical Exposed Volume","Value"]
                geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"] = 2.0*geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"]
                geometry_data[tag]["Data"].loc["Planform Apex X-Coordinate","Value"] = ep_parms[0]
                geometry_data[tag]["Data"].loc["Planform Apex Y-Coordinate","Value"] = ep_parms[1]
                geometry_data[tag]["Data"].loc["Planform Apex Z-Coordinate","Value"] = geometry_input[tag]["Xsec"]["Airfoil Leading-Edge Z Location"][0]
                geometry_data[tag]["Data"].loc["Planform Root Chord Length","Value"] = ep_parms[2]
                geometry_data[tag]["Data"].loc["Planform Taper Ratio","Value"] = ep_parms[3]
                geometry_data[tag]["Data"].loc["Planform Span","Value"] = ep_parms[4]
                geometry_data[tag]["Data"].loc["Planform Area","Value"] = ep_parms[5]
                geometry_data[tag]["Data"].loc["Planform Leading-Edge Sweep Angle","Value"] = ep_parms[6]
                geometry_data[tag]["Data"].loc["Planform Aspect Ratio","Value"] = ep_parms[7]
                geometry_data[tag]["Data"].loc["Planform MAC Length","Value"] = ep_parms[8]
                geometry_data[tag]["Data"].loc["Planform MAC Location","Value"] = geometry_data[tag]["Data"].loc["Planform Apex X-Coordinate","Value"]+ep_parms[9]
                geometry_data = fs_planform2exposed(geometry_data,geometry_input,tag)
                geometry_data[tag]["Data"].loc["Max t/c Sweep","Value"] = np.tan(np.deg2rad(geometry_data[tag]["Data"].loc["Planform Leading-Edge Sweep Angle","Value"])) - 4.0/geometry_data[tag]["Data"].loc["Planform Aspect Ratio","Value"]*(geometry_data[tag]["Data"].loc["Max t/c Location x/c","Value"]*(1.0-geometry_data[tag]["Data"].loc["Planform Taper Ratio","Value"])/(1.0+geometry_data[tag]["Data"].loc["Planform Taper Ratio","Value"]))
                
            elif geometry_input[tag]["Type"] == "Horizontal Tail" or geometry_input[tag]["Type"] == "Canard":
                geometry_data[geometry_input[tag]["Attached Component Tag"]]["Data"].loc["Wetted Surface Area","Value"] -= 2.0*geometry_data[tag]["Data"].loc["Area Distribution","Value"][0][1]
                geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"] = 2.0*geometry_data[tag]["Data"].loc["Theoretical Exposed Surface Area","Value"]
                geometry_data[tag]["Data"].loc["Theoretical Exposed Volume","Value"] = 2.0*geometry_data[tag]["Data"].loc["Theoretical Exposed Volume","Value"]
                geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"] = 2.0*geometry_data[tag]["Data"].loc["Wetted Surface Area","Value"]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex X-Coordinate","Value"] = ep_parms[0]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex Y-Coordinate","Value"] = ep_parms[1]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex Z-Coordinate","Value"] = geometry_input[tag]["Xsec"]["Airfoil Leading-Edge Z Location"][0]
                geometry_data[tag]["Data"].loc["Exposed Planform Root Chord Length","Value"] = ep_parms[2]
                geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"] = ep_parms[3]
                geometry_data[tag]["Data"].loc["Exposed Planform Span","Value"] = ep_parms[4]
                geometry_data[tag]["Data"].loc["Exposed Planform Area","Value"] = ep_parms[5]
                geometry_data[tag]["Data"].loc["Exposed Planform Leading-Edge Sweep Angle","Value"] = ep_parms[6]
                geometry_data[tag]["Data"].loc["Exposed Planform Aspect Ratio","Value"] = ep_parms[7]
                geometry_data[tag]["Data"].loc["Exposed Planform MAC Length","Value"] = ep_parms[8]
                geometry_data[tag]["Data"].loc["Exposed Planform MAC Location","Value"] = geometry_data[tag]["Data"].loc["Exposed Planform Apex X-Coordinate","Value"]+ep_parms[9]
                geometry_data[tag]["Data"].loc["Max t/c Sweep","Value"] = np.tan(np.deg2rad(geometry_data[tag]["Data"].loc["Exposed Planform Leading-Edge Sweep Angle","Value"])) - 4.0/geometry_data[tag]["Data"].loc["Exposed Planform Aspect Ratio","Value"]*(geometry_data[tag]["Data"].loc["Max t/c Location x/c","Value"]*(1.0-geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"])/(1.0+geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"]))

            elif geometry_input[tag]["Type"] == "Vertical Tail":
                geometry_data[geometry_input[tag]["Attached Component Tag"]]["Data"].loc["Wetted Surface Area","Value"] -= geometry_data[tag]["Data"].loc["Area Distribution","Value"][0][1]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex X-Coordinate","Value"] = ep_parms[0]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex Y-Coordinate","Value"] = ep_parms[1]
                geometry_data[tag]["Data"].loc["Exposed Planform Apex Z-Coordinate","Value"] = geometry_input[tag]["Xsec"]["Airfoil Leading-Edge Z Location"][0]
                geometry_data[tag]["Data"].loc["Exposed Planform Root Chord Length","Value"] = ep_parms[2]
                geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"] = ep_parms[3]
                geometry_data[tag]["Data"].loc["Exposed Planform Span","Value"] = ep_parms[4]/2.0
                geometry_data[tag]["Data"].loc["Exposed Planform Area","Value"] = ep_parms[5]/2.0
                geometry_data[tag]["Data"].loc["Exposed Planform Leading-Edge Sweep Angle","Value"] = ep_parms[6]
                geometry_data[tag]["Data"].loc["Exposed Planform Aspect Ratio","Value"] = ep_parms[7]/2.0
                geometry_data[tag]["Data"].loc["Exposed Planform MAC Length","Value"] = ep_parms[8]
                geometry_data[tag]["Data"].loc["Exposed Planform MAC Location","Value"] = geometry_data[tag]["Data"].loc["Exposed Planform Apex X-Coordinate","Value"]+ep_parms[9]
                geometry_data[tag]["Data"].loc["Max t/c Sweep","Value"] = np.tan(np.deg2rad(geometry_data[tag]["Data"].loc["Exposed Planform Leading-Edge Sweep Angle","Value"])) - 4.0/geometry_data[tag]["Data"].loc["Exposed Planform Aspect Ratio","Value"]*(geometry_data[tag]["Data"].loc["Max t/c Location x/c","Value"]*(1.0-geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"])/(1.0+geometry_data[tag]["Data"].loc["Exposed Planform Taper Ratio","Value"]))
                
    for tag in geometry_input.keys():
        if geometry_input[tag]["Type"] == "Horizontal Tail" or geometry_input[tag]["Type"] == "Canard":
            geometry_data[tag]["Data"].loc["Exposed Volume Coefficient","Value"] = fs_volume_coefficient(
                    geometry_data[reference_tag]["Data"].loc["Planform MAC Length","Value"],
                    geometry_data[reference_tag]["Data"].loc["Planform Area","Value"],
                    geometry_data[reference_tag]["Data"].loc["Planform MAC Location","Value"],
                    geometry_data[tag]["Data"].loc["Exposed Planform MAC Location","Value"],
                    geometry_data[tag]["Data"].loc["Exposed Planform Area","Value"]
                    )
        elif geometry_input[tag]["Type"] == "Vertical Tail":
            geometry_data[tag]["Data"].loc["Exposed Volume Coefficient","Value"] = fs_volume_coefficient(
                    geometry_data[reference_tag]["Data"].loc["Planform Span","Value"],
                    geometry_data[reference_tag]["Data"].loc["Planform Area","Value"],
                    geometry_data[reference_tag]["Data"].loc["Planform MAC Location","Value"],
                    geometry_data[tag]["Data"].loc["Exposed Planform MAC Location","Value"],
                    geometry_data[tag]["Data"].loc["Exposed Planform Area","Value"]
                    )
            
    for tag in geometry_data.keys():
        if geometry_data[tag]["Type"] == "Wing":
            AR = geometry_data[tag]["Data"].loc["Planform Aspect Ratio","Value"]
            QC_SWEEP = geometry_data[tag]["Data"].loc["Exposed Planform Quarter-Chord Sweep Angle","Value"]
            AR_Max = 10.0**(0.842-0.435*np.tan(np.deg2rad(QC_SWEEP)))
            Delta_AR = AR_Max - AR
            geometry_data[tag]["Data"].loc["Pitch-up Tendency Chart Aspect Ratio","Value"] = AR_Max
            geometry_data[tag]["Data"].loc["Pitch-up Tendency Chart Aspect Ratio Difference","Value"] = Delta_AR
    return geometry_data
